@page "/ChatHub"
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@using Microsoft.AspNetCore.Components.Web

<PageTitle>Public Chat</PageTitle>
<h3>Public Chat</h3>

@if (!IsConnected)
{
    <div class="input-group">
        <input @bind="username" class="form-control" placeholder="What's your name?" />
        <button class="btn btn-primary form-control-append" @onclick="Connect">
            Connect
        </button>
    </div>
}
else
{
    <textarea style="width: 100%; height: 500px;" readonly="readonly" @ref="TextAreaRef" class="form-control">
        @messages
            </textarea>
    <div class="input-group">
        <input @bind="message" class="form-control" placeholder="Enter your message" />
        <button class="btn btn-primary form-group-append" @onclick="Send" disabled="@(!IsConnected)">
            Send
        </button>
    </div>
}

<link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" crossorigin="anonymous" />

@code {
    private HubConnection? hubConnection;
    private string messages = string.Empty;
    private string username = string.Empty;
    private string message = string.Empty;
    ElementReference TextAreaRef;

    private async Task Connect()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri($"/chatHub?username={username}"))
            .Build();

        hubConnection.On<string, string>("ReceiveMessage", (user, message) =>
        {
            var msg = $"{(string.IsNullOrEmpty(user) ? "" : user + ": ")}{message}";
            messages += msg + "\n";
            StateHasChanged();
            JSRuntime.InvokeVoidAsync("eval", "document.getElementById('TextAreaRef').scrollTop = document.getElementById('TextAreaRef').scrollHeight");
        });

        await hubConnection.StartAsync();
    }

    private async Task Send()
    {
        if (hubConnection != null)
        {
            await hubConnection.SendAsync("AddMessageToChat", username, message);
            message = string.Empty;
        }
    }

    public bool IsConnected => hubConnection?.State == HubConnectionState.Connected;
}